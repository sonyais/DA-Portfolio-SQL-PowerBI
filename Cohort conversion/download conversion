/* Задача: провести когортный анализ для магазина приложений Rustore. Разбить пользователей на понедельные когорты по дате регистрации и посчитать конверсию в первую загрузку внутри этих когорт.
 Есть таблица table со следующей структурой столбцов:
 (1) ﻿﻿﻿﻿userid - идентификатор пользователя
 (2) ﻿﻿﻿﻿eventName - название события (действия, которое совершает пользователь), может принимать следующие значения:
    -- launch - пользователь зашел в приложение
    -- ﻿﻿register - пользователь зарегестрировался в приложении
    -- pageVisit - пользователь посетил страницу приложения, которое можно скачать, обновить или купить
    -- download - пользователь скачал приложение из стора
    -- buy - пользователь купил приложение из стора
    -- update - пользователь обновил приложение из стора.
 (3) time - время события (когда пользователь совершил действие eventName)
 (4) ﻿﻿﻿﻿product - идентификатор приложения, которое пользователь скачал/купил или на страницу которого заходил (если событие не связано с продуктом - заход в стор, регистрация, то значение product - null).
 
 Конечный результат запроса - таблица с тремя столбцами:
 ⁃ ﻿﻿week - неделя (когорта)
 ⁃ ﻿﻿users - количество пользователей, которые впервые зарегистрировались в сторе в эту неделю
 - CR - конверсия в первую загрузку для этик пользователей (доля users, которые совершили загружу приложения из стора в ту же неделю, что и неделя регистрации, то есть когорта).
 ПРИМЕЧАНИЕ: первый заход пользователя в стор был не ранее 2023-03-01*/


-- Решаю: тк 01.03.2023 - это среда, нам нужно группировать даты по неделям, начиная со среды, а не с воскресенья, как по умолчанию в postgresql.

with table as (select *, date_trunc('week', time::timestamp + interval '2 day') - interval '2 day' as week
from table ),
r_us as (select userId, week
from table t
where eventName = 'register' and week >= '2023-03-01'
order by week),
d_us as (select userId, week                 
from table t
where eventName = 'download' and time >= '2023-03-01'
order by week),
gr_r as (select week, count(userId) as users
from r_us 
group by week), 
rd as (select d_us.week, d_us.userId as rd_users
from d_us
join r_us 
on d_us.userId = r_us.userId and d_us.week=r_us.week),
gr_rd as (select week, count(distinct rd_users) as cnt
from rd
group by week)
select gr_r.*, round(cnt/users::numeric, 3) as CR from gr_r 
join gr_rd
on gr_r.week = gr_rd.week
